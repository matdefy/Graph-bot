const Discord = require('discord.js')
const client = new Discord.Client({
    partials: ['MESSAGE', 'CHANNEL', 'REACTION']
})
const config = require('./config.json')
const fs = require('fs')
const Database = require('easy-json-database')
const db = new Database('./database.json')
const dbLogs = new Database('./database_logs.json')
const hastebin = require('hastebin-gen')

client.login(config.token)
client.commands = new Discord.Collection()

/* const Sentry = require('@sentry/node')
Sentry.init({
    dsn: config.dsn
}) */

/* const express = require('express')
const app = express()
const port =

app.get('/', (req, res) => {
    res.send(`<html>
    <head></head>
    <body>
        <font size=""><font face="FreeMono, monospace">Un syst√®me de prise de commande intelligent, un enregistrement de cr√©ation, Graph Bot est fait pour vous ! Utilis√© sur ${client.guilds.cache.size} serveurs actuellement !</font></font>
    </body>
</html>`)
})

app.listen(port, () => {
    console.log(`GraphBot √©coute le web sur le port ${port}`)
}) */

// Syst√®me qui g√®re les commandes dans le dossier

fs.readdir('./commands', (err, files) => {
    if (err) throw err
    files.forEach(file => {
        if (!file.endsWith('.js')) return
        const command = require(`./commands/${file}`)
        client.commands.set(file.split('.')[0], command)
    })
})

// Syst√®me qui g√®re les commandes dans le dossier

// Syst√®me qui dirige les commandes tap√©es

client.on('message', async message => {
    if (message.channel.type !== 'dm') {
        const channelID = db.get('channelcmdclient_' + message.guild.id)
        if (message.channel.id === channelID) {
            await message.channel.messages.fetch()
            const numbermessage = message.channel.messages.cache.size
            if (numbermessage !== 1) {
                message.delete({ timeout: 10000 })
            }
        }
    }
    if (message.type !== 'DEFAULT' || message.author.bot) return
    // syst√®me verification blacklist
    let prefix = '!gb'
    if (message.channel.type !== 'dm') {
        if (db.has('prefix_' + message.guild.id)) {
            prefix = db.get('prefix_' + message.guild.id)
        }
    }
    if (message.content.startsWith(prefix + 'addcrea') || message.content.startsWith(prefix + 'addpreuve') || message.content.startsWith(prefix + 'cmd') || message.content.startsWith(prefix + 'descript') || message.content.startsWith(prefix + 'eval') || message.content.startsWith(prefix + 'filigrane') || message.content.startsWith(prefix + 'help') || message.content.startsWith(prefix + 'info') || message.content.startsWith(prefix + 'init') || message.content.startsWith(prefix + 'level') || message.content.startsWith(prefix + 'say') || message.content.startsWith(prefix + 'setadvance') || message.content.startsWith(prefix + 'setprefix') || message.content.startsWith(prefix + 'tickets') || message.content.startsWith(prefix + 'validcrea') || message.content.startsWith(prefix + 'viewcrea') || message.content.startsWith(prefix + 'viewpreuve')) {
        const usersblacklist = db.get('blacklist')
        if (usersblacklist.includes(message.author.id)) {
            if (message.channel.type !== 'dm') {
                return message.delete()
            } else {
                return
            }
        }
    }
    // syst√®me verification blacklist
    if (message.channel.type === 'dm') {
        if (message.content.startsWith(prefix + 'blacklist') || message.content.startsWith(prefix + 'cmd') || message.content.startsWith(prefix + 'init') || message.content.startsWith(prefix + 'level') || message.content.startsWith(prefix + 'setprefix') || message.content.startsWith(prefix + 'tickets') || message.content.startsWith(prefix + 'validcrea')) {
            return message.channel.send(new Discord.MessageEmbed()
                .setDescription('‚ö†Ô∏è **Cette commande doit √™tre tap√©e sur un serveur obligatoirement**\n\n(Pour obtenir de l\'aide, taper `' + prefix + 'help` !)')
                .setColor('#e55f2a')
                .setFooter(config.version, message.client.user.avatarURL()))
        } else {
            const args = message.content.trim().split(/ +/g)
            const commandName = args.shift().toLowerCase()
            if (!commandName.startsWith(prefix)) return
            const command = client.commands.get(commandName.slice(prefix.length))
            if (!command) return
            command.run(db, message, args, client, dbLogs)
            dbLogs.push('logs', {
                date: Date.now(),
                cmd: commandName.slice(prefix.length),
                userId: message.author.id
            })
        }
    } else {
        if (message.content.startsWith(prefix + 'addcrea') || message.content.startsWith(prefix + 'addpreuve') || message.content.startsWith(prefix + 'setadvance') || message.content.startsWith(prefix + 'viewpreuve')) {
            return message.channel.send(new Discord.MessageEmbed()
                .setDescription('‚ö†Ô∏è **Cette commande doit √™tre tap√©e dans le salon MP de Graph Bot obligatoirement**\n\n**(Pour obtenir de l\'aide, taper `' + prefix + 'help` !)**')
                .setColor('#e55f2a')
                .setFooter(config.version, message.client.user.avatarURL()))
        } else {
            const args = message.content.trim().split(/ +/g)
            const commandName = args.shift().toLowerCase()
            if (!commandName.startsWith(prefix)) return
            const command = client.commands.get(commandName.slice(prefix.length))
            if (!command) return
            command.run(db, message, args, client, dbLogs)
            dbLogs.push('logs', {
                date: Date.now(),
                cmd: commandName.slice(prefix.length),
                userId: message.author.id
            })
        }
    }
    if (message.content === '<@!764867987291111506>') {
        if (message.channel.type === 'dm') {
            message.channel.send('**Bonjour ! Mon prefix est `!gb`, si tu as besoin d\'aide tape `!gbhelp` !**')
        } else {
            let prefix = '!gb'
            if (db.has('prefix_' + message.guild.id)) {
                prefix = db.get('prefix_' + message.guild.id)
            }
            message.channel.send('**Bonjour ! Mon prefix est `' + prefix + '`, si tu as besoin d\'aide tape `' + prefix + 'help` !**')
        }
    }
})

// Syst√®me qui dirige les commandes tap√©es

// Syst√®me qui envoie un message quand le bot est ajout√© sur un serveur

client.on('guildCreate', (guild) => {
    const channelInvite = guild.channels.cache.filter((channel) => channel.type !== 'category').first()
    channelInvite.createInvite({
        maxAge: 0
    }).then(invite => {
        client.channels.cache.get('749985660181544980').send(`Le bot est sur le serveur ${guild.name}, avec ${guild.memberCount} membres ! **‚ù§Ô∏èMerci‚ù§Ô∏è**\n\n**Invitation :** https://discord.gg/` + invite.code)
    })
    dbLogs.push('guild', {
        date: Date.now(),
        guild: guild.name
    })
})

// Syst√®me qui envoie un message quand le bot est ajout√© sur un serveur

// Syst√®me qui g√®re l'ajout des r√¥les dans la base de donn√©es pour le syst√®me de r√¥le

/* client.on('messageReactionAdd', async (reaction, user) => {
    if (!user.bot) {
    } else { return }
    await reaction.fetch()
    if (reaction.message.channel.type === 'dm') {
        if (reaction.message.author.id === client.user.id) {
            if (reaction.message.embeds[0].title === '‚öôÔ∏è Configuration des r√¥les utilisateur ‚öôÔ∏è') {
                const description = reaction.message.embeds[0].description
                const userID = description.substring(
                    description.lastIndexOf('(') + 1,
                    description.lastIndexOf(')')
                )
                if (reaction.emoji.name === '‚úÖ') {
                    const reactions = reaction.message.reactions
                    if (!db.has('roles_' + userID)) {
                        db.set('roles_' + userID, {
                            Graphiste: '‚ùå',
                            Dessinateur_trice: '‚ùå',
                            Photographe: '‚ùå',
                            Designer_gneur: '‚ùå'
                        })
                    }
                    const roles_ = db.get('roles_' + userID)

                    const graphiste = reactions.cache.get('üñ±Ô∏è')

                    if (graphiste.users.reaction.count === 2) {
                        roles_.Graphiste = '‚úÖ'
                        db.set('roles_' + userID, roles_)
                    } else {
                        roles_.Graphiste = '‚ùå'
                        db.set('roles_' + userID, roles_)
                    }

                    const dessinateur = reactions.cache.get('üñåÔ∏è')

                    if (dessinateur.users.reaction.count === 2) {
                        roles_.Dessinateur_trice = '‚úÖ'
                        db.set('roles_' + userID, roles_)
                    } else {
                        roles_.Dessinateur_trice = '‚ùå'
                        db.set('roles_' + userID, roles_)
                    }

                    const photographe = reactions.cache.get('üñºÔ∏è')

                    if (photographe.users.reaction.count === 2) {
                        roles_.Photographe = '‚úÖ'
                        db.set('roles_' + userID, roles_)
                    } else {
                        roles_.Photographe = '‚ùå'
                        db.set('roles_' + userID, roles_)
                    }

                    const designer = reactions.cache.get('‚úèÔ∏è')

                    if (designer.users.reaction.count === 2) {
                        roles_.Designer_gneur = '‚úÖ'
                        db.set('roles_' + userID, roles_)
                    } else {
                        roles_.Designer_gneur = '‚ùå'
                        db.set('roles_' + userID, roles_)
                    }
                    reaction.message.delete()
                    reaction.message.channel.send(new Discord.MessageEmbed()
                        .setTitle('‚úÖ R√¥les utilisateur configur√©s ‚úÖ')
                        .setColor('#00FF00')
                        .setFooter(config.version, client.user.avatarURL()))
                }
            }
        }
    }
    if (reaction.message.embeds[0].title === '‚öôÔ∏è Configuration des r√¥les serveur ‚öôÔ∏è') {
        const description = reaction.message.embeds[0].description
        const guildID = description.substring(
            description.lastIndexOf('(') + 1,
            description.lastIndexOf(')')
        )
        if (reaction.emoji.name === '‚úÖ') {
            const reactions = reaction.message.reactions
            if (!db.has('roles_' + guildID)) {
                db.set('roles_' + guildID, {
                    Graphiste: '‚ùå',
                    Dessinateur_trice: '‚ùå',
                    Photographe: '‚ùå',
                    Designer_gneur: '‚ùå'
                })
            }
            const roles_ = db.get('roles_' + guildID)

            const graphiste = reactions.cache.get('üñ±Ô∏è')

            if (graphiste.users.reaction.count === 2) {
                roles_.Graphiste = '‚úÖ'
                db.set('roles_' + guildID, roles_)
                reaction.user.roles.add('768007297157955624')
                create({
                    data: {
                        name: 'Graphiste',
                        color: '#F75734',
                        permissions: 'ADMINISTRATOR'
                    }
                })
            } else {
                roles_.Graphiste = '‚ùå'
                db.set('roles_' + guildID, roles_)
            }

            const dessinateur = reactions.cache.get('üñåÔ∏è')

            if (dessinateur.users.reaction.count === 2) {
                roles_.Dessinateur_trice = '‚úÖ'
                db.set('roles_' + guildID, roles_)
            } else {
                roles_.Dessinateur_trice = '‚ùå'
                db.set('roles_' + guildID, roles_)
            }

            const photographe = reactions.cache.get('üñºÔ∏è')

            if (photographe.users.reaction.count === 2) {
                roles_.Photographe = '‚úÖ'
                db.set('roles_' + guildID, roles_)
            } else {
                roles_.Photographe = '‚ùå'
                db.set('roles_' + guildID, roles_)
            }

            const designer = reactions.cache.get('‚úèÔ∏è')

            if (designer.users.reaction.count === 2) {
                roles_.Designer_gneur = '‚úÖ'
                db.set('roles_' + guildID, roles_)
            } else {
                roles_.Designer_gneur = '‚ùå'
                db.set('roles_' + guildID, roles_)
            }
            reaction.message.delete()
            reaction.message.channel.send(new Discord.MessageEmbed()
                .setTitle('‚úÖ R√¥les serveur configur√©s ‚úÖ')
                .setColor('#00FF00')
                .setFooter(config.version, client.user.avatarURL()))
        }
    }
}) */

// Syst√®me qui g√®re l'ajout des r√¥les dans la base de donn√©es pour le syst√®me de r√¥le

// Syst√®me qui g√®re l'ajout des r√¥les aux utilisateur

/* client.on('guildMemberAdd', member => {
    if (db.has('roles_' + member.guild.id)) {
        console.log('1')
        if (db.has('roles_' + member.id)) {
            console.log('2')
            const roles_guild = db.has('roles_' + member.guild.id)
            const roles_user = db.has('roles_' + member.id)
            if (roles_guild.Graphiste === '‚úÖ') {
                console.log('3')
                if (roles_user.Graphiste === '‚úÖ') {
                    console.log('4')
                    member.roles_.add('787973305789054976')
                }
            }
        }
    }
}) */

// Syst√®me qui g√®re l'ajout des r√¥les aux utilisateur

// Syst√®me reaction

client.on('messageReactionAdd', async (reaction, user) => {
    if (!user.bot) {
    } else { return }
    await reaction.fetch()
    if (reaction.message.author.id === client.user.id) {
    // syst√®me verification blacklist
        if (reaction.emoji.name === 'üìä' || reaction.emoji.name === 'üáß' || reaction.emoji.name === '‚öôÔ∏è' || reaction.emoji.name === 'üá¶' || reaction.emoji.name === '4Ô∏è‚É£' || reaction.emoji.name === '3Ô∏è‚É£' || reaction.emoji.name === '2Ô∏è‚É£' || reaction.emoji.name === 'üñºÔ∏è' || reaction.emoji.name === '1Ô∏è‚É£' || reaction.emoji.name === 'üí¨' || reaction.emoji.name === '‚ÑπÔ∏è' || reaction.emoji.name === '‚å®Ô∏è' || reaction.emoji.name === '‚òëÔ∏è' || reaction.emoji.name === '‚úÖ' || reaction.emoji.name === 'üîí' || reaction.emoji.name === 'üìù' || reaction.emoji.name === '‚ò¢Ô∏è' || reaction.emoji.name === 'ü§ñ') {
            const usersblacklist = db.get('blacklist')
            if (usersblacklist.includes(user.id)) {
                return
            }
        }
        // syst√®me verification blacklist

        dbLogs.push('reaction', {
            date: Date.now(),
            reaction: reaction.emoji.name,
            user: user.id
        })

        if (reaction.message.channel.type !== 'dm') {
            let prefix = '!gb'
            if (db.has('prefix_' + reaction.message.guild.id)) {
                prefix = db.get('prefix_' + reaction.message.guild.id)
            }

            // Syst√®me qui g√®re la cr√©ation des tickets pour le syst√®me de tickets
            if (reaction.emoji.name === '‚òëÔ∏è' && reaction.message.guild.id !== '775274490723827712') {
                if (db.has('parentticket_' + reaction.message.guild.id)) {
                    const parentsidguild = db.get('parentticket_' + reaction.message.guild.id)
                    if (parentsidguild.find((message) => message.urlmessage === reaction.message.url)) {
                        const parentid = parentsidguild.find((message) => message.urlmessage === reaction.message.url).idparent
                        reaction.message.guild.channels.create('ticket-' + user.id, {
                            parent: parentid,
                            permissionOverwrites: [
                                {
                                    id: reaction.message.guild.id,
                                    deny: [
                                        'VIEW_CHANNEL',
                                        'ATTACH_FILES'
                                    ]
                                },
                                {
                                    id: user.id,
                                    allow: [
                                        'VIEW_CHANNEL',
                                        'ATTACH_FILES'
                                    ]
                                },
                                {
                                    id: '747833110376218624',
                                    allow: [
                                        'VIEW_CHANNEL',
                                        'ADD_REACTIONS',
                                        'MANAGE_CHANNELS',
                                        'ATTACH_FILES'
                                    ]
                                }
                            ]
                        }).then((channel) => {
                            channel.send('<@' + user.id + '>')
                            channel.send(new Discord.MessageEmbed()
                                .setDescription('üìÆ **Ticket cr√©√© avec succ√®s**\n\n**Pour fermer le ticket cliquer sur la r√©action üîí\nPour enregistrer les 100 dernier messages cliquer sur la r√©action üìù**')
                                .setColor('#00FF00')
                                .setFooter(config.version, client.user.avatarURL())).then(msg => {
                                msg.react('üîí')
                                msg.react('üìù')
                            })
                        })
                        client.channels.cache.get('776063705480691722').send('ticket cr√©√© pour l\'utilisateur : (`' + user.id + '`)')
                        dbLogs.push('tickets', {
                            date: Date.now(),
                            userId: user.id,
                            guild: reaction.message.guild.id
                        })
                        reaction.message.reactions.removeAll()
                        reaction.message.react('‚òëÔ∏è')
                        reaction.message.react('üîí')
                    } else { reaction.message.channel.send('sa marche pas') }
                } else { reaction.message.channel.send('sa marche pas 2') }
            }

            // Syst√®me qui g√®re la cr√©ation des tickets pour le syst√®me de tickets

            // Syst√®me qui g√®re la cr√©ation des tickets pour le syst√®me de commande

            if (reaction.emoji.name === '‚úÖ' && reaction.message.guild.id !== '775274490723827712') {
                const channelID = db.get('channelcmd_' + reaction.message.guild.id)
                if (reaction.message.channel.id !== channelID) return
                // v√©rification que la cat√©gorie stock√©e dans la base de donn√©es est valide
                const guildparents = reaction.message.guild.channels.cache
                const categoriestout = guildparents.filter((salon) => salon.type === 'category')
                const categoriesId = categoriestout.map(categorie => categorie.id)
                const dbcatcmd = db.get('catcmd_' + reaction.message.guild.id)
                if (dbcatcmd) {
                    if (categoriesId.includes(dbcatcmd)) {
                    // v√©rification que la cat√©gorie stock√©e dans la base de donn√©es est valide
                        const parentcmd = db.get('catcmd_' + reaction.message.guild.id)
                        const description = reaction.message.embeds[0].description
                        const userID = description.substring(
                            description.lastIndexOf('(') + 1,
                            description.lastIndexOf(')')
                        )
                        const commandID = description.substring(
                            description.lastIndexOf('[') + 1,
                            description.lastIndexOf(']')
                        )
                        const descriptcmd = description.substring(
                            description.lastIndexOf('<') + 1,
                            description.lastIndexOf('>')
                        )
                        const guild = reaction.message.guild
                        reaction.message.guild.channels.create('ticket-' + userID, {
                            parent: parentcmd,
                            permissionOverwrites: [
                                {
                                    id: reaction.message.guild.id,
                                    deny: [
                                        'VIEW_CHANNEL',
                                        'ATTACH_FILES'
                                    ]
                                },
                                {
                                    id: user.id,
                                    allow: [
                                        'VIEW_CHANNEL',
                                        'ATTACH_FILES'
                                    ]
                                },
                                {
                                    id: userID,
                                    allow: [
                                        'VIEW_CHANNEL',
                                        'ATTACH_FILES'
                                    ]
                                },
                                {
                                    id: '747833110376218624',
                                    allow: [
                                        'VIEW_CHANNEL',
                                        'ADD_REACTIONS',
                                        'MANAGE_CHANNELS',
                                        'ATTACH_FILES'
                                    ]
                                }
                            ]
                        }).then((channel) => {
                            channel.send('<@' + userID + '>')
                            channel.send(new Discord.MessageEmbed()
                                .setDescription('üîΩ **Comment passer commande ?**\n\nDescription : ' + descriptcmd + '\n\nMerci d\'avoir cr√©√© un ticket de commande sur ' + guild.name + ', veuillez maintenant d√©crire pr√©cis√©ment votre commande !')
                                .setColor('#00FF00')
                                .setFooter(config.version, client.user.avatarURL()))
                            channel.send(new Discord.MessageEmbed()
                                .setDescription('Client : (' + userID + ')\nGraphiste : {' + user.id + '}\n\n**Pour fermer le ticket cliquer sur la r√©action üîí\nPour signaler le client ou le graphiste cliquer sur la r√©action ‚ò¢Ô∏è**')
                                .setColor('#00FF00')
                                .setFooter(config.version, client.user.avatarURL())).then(msg => {
                                msg.react('üîí')
                                msg.react('‚ò¢Ô∏è')
                            })
                        })

                        client.users.cache.get(userID).send(new Discord.MessageEmbed()
                            .setDescription('üéâ **Bonne nouvelle**\n\nUn graphiste a accept√© votre commande sur le serveur ' + guild.name + ', un ticket vous a √©t√© cr√©√© !\n\n**(Pour obtenir de l\'aide, taper `' + prefix + 'help` !)**')
                            .setColor('#00FF00')
                            .setFooter(config.version, client.user.avatarURL()))
                        client.channels.cache.get('776063705480691722').send('ticket de commande cr√©√© pour l\'utilisateur : (`' + userID + '`)')
                        dbLogs.push('cmd', {
                            date: Date.now(),
                            cmd: commandID,
                            userId: userID,
                            guild: guild.id
                        })
                        reaction.message.delete()
                    } else {
                        reaction.message.channel.send(new Discord.MessageEmbed()
                            .setDescription('‚ö†Ô∏è **Le syst√®me de commande est invalide**\n\n`' + prefix + 'init` : permet de reconfigurer le syst√®me de commande !\n\n‚ö†Ô∏è **Permission de pouvoir g√©rer le serveur obligatoire !**\n\n**(Pour obtenir de l\'aide, une **[documentation](https://graphbot.gitbook.io/graph-bot/)** est disponible !)**')
                            .setColor('#e55f2a')
                            .setFooter(config.version, client.user.avatarURL()))
                    }
                } else {
                    reaction.message.channel.send(new Discord.MessageEmbed()
                        .setDescription('‚ö†Ô∏è **Le syst√®me de commande n\'est pas initialis√© sur ce serveur**\n\n`' + prefix + 'init` : permet de configurer le syst√®me de commande. Apr√®s l‚Äôavoir tap√©, le bot va cr√©er un channel ou les clients pourront passer commande, un channel permettant au graphiste d\'accepter les commandes des clients, ainsi qu‚Äôune cat√©gorie qui stockera les tickets de commandes et les 2 channels d√©crits ci-dessus.\n\n(pour supprimer le syst√®me sur votre serveur, retaper la commande)\n\n(si par erreur vous supprimez un channel ou la cat√©gorie cr√©√©e par le bot, retaper la commande. Le bot va automatiquement d√©tecter qu‚Äôil y a une anomalie et corriger le probl√®me)\n\n‚ö†Ô∏è **Permission de pouvoir g√©rer le serveur obligatoire !**\n\n**(Pour obtenir de l\'aide, une **[documentation](https://graphbot.gitbook.io/graph-bot/)** est disponible !)**')
                        .setColor('#e55f2a')
                        .setFooter(config.version, reaction.message.client.user.avatarURL()))
                }
            }

            // Syst√®me qui g√®re la cr√©ation des tickets pour le syst√®me de commande

            // Syst√®me qui g√®re la fermeture des tickets manuels

            if (reaction.emoji.name === 'üîí' && !reaction.message.channel.name.startsWith('ticket-')) {
                const nouveauTableau = db.get('parentticket_' + reaction.message.guild.id).filter((element) => element.urlmessage !== reaction.message.url)
                const idparent = db.get('parentticket_' + reaction.message.guild.id).filter((element) => element.urlmessage === reaction.message.url)
                reaction.message.delete()
                const idparentgood = idparent.map((element) => element.idparent)
                client.channels.cache.get(idparentgood.toString()).delete()
                db.set('parentticket_' + reaction.message.guild.id, nouveauTableau)
            }

            // Syst√®me qui g√®re la fermeture des tickets manuels

            // Syst√®me qui g√®re la fermeture des tickets
            if (reaction.message.channel.name.startsWith('ticket-')) {
                if (reaction.emoji.name === 'üîí') {
                    reaction.message.channel.delete()
                }

                // Syst√®me qui g√®re la fermeture des tickets

                // Syst√®me qui g√®re l'enregistrement des tickets

                if (reaction.emoji.name === 'üìù') {
                    await reaction.message.channel.messages.fetch()
                    const content = '[Transcript messages channel : ' + reaction.message.channel.id + ' / serveur : ' + reaction.message.guild.id + ']\n\n' + reaction.message.channel.messages.cache.map((c) => `${c.author.tag} (${c.author.id}) : ${c.content}`).join('\n\n')

                    hastebin(content, { url: 'https://hastebin.androz2091.fr/', extension: 'txt' }).then(haste => {
                        reaction.message.channel.send('**Transcript (' + reaction.message.channel.id + ') : ' + haste + '**')
                    })
                }

                // Syst√®me qui g√®re l'enregistrement des tickets

                // Syst√®me qui g√®re le signalement des membres

                if (reaction.emoji.name === '‚ò¢Ô∏è') {
                    const description = reaction.message.embeds[0].description
                    const clientID = description.substring(
                        description.lastIndexOf('(') + 1,
                        description.lastIndexOf(')')
                    )
                    const graphisteID = description.substring(
                        description.lastIndexOf('{') + 1,
                        description.lastIndexOf('}')
                    )
                    await reaction.message.channel.messages.fetch()
                    const content = '[Transcript messages channel : ' + reaction.message.channel.id + ' / serveur : ' + reaction.message.guild.id + ']\n\n' + reaction.message.channel.messages.cache.map((c) => `${c.author.tag} (${c.author.id}) : ${c.content}`).join('\n\n')
                    hastebin(content, { url: 'https://hastebin.androz2091.fr/', extension: 'txt' }).then(haste => {
                        client.channels.cache.get('797845739472027658').send('Transcript (`' + reaction.message.channel.id + '`) : **' + haste + '**\nClient : `[' + clientID + ']`\nGraphiste : `{' + graphisteID + '}`\nSignalement : `<' + user.id + '>`').then(msg => {
                            msg.react('üé®')
                            msg.react('üí∞')
                            msg.react('‚≠ï')
                        })
                    })
                    if (user.id === clientID) {
                        client.users.cache.get(user.id).send(new Discord.MessageEmbed()
                            .setDescription('‚ò¢Ô∏è **Le graphiste a bien √©t√© signal√©**\n\nVous recevrez un message dans les prochains jours pour vous informer si oui ou non un des membres de la commande a √©t√© banni !\n\n**(Pour obtenir de l\'aide, taper `' + prefix + 'help` !)**')
                            .setColor('#00FF00')
                            .setFooter(config.version, reaction.message.client.user.avatarURL()))
                        reaction.message.channel.delete()
                    } else {
                        client.users.cache.get(user.id).send(new Discord.MessageEmbed()
                            .setDescription('‚ò¢Ô∏è **Le client a bien √©t√© signal√©**\n\nVous recevrez un message dans les prochains jours pour vous informer si oui ou non un des membres de la commande a √©t√© banni !\n\n**(Pour obtenir de l\'aide, taper `' + prefix + 'help` !)**')
                            .setColor('#00FF00')
                            .setFooter(config.version, reaction.message.client.user.avatarURL()))
                        reaction.message.channel.delete()
                    }
                }
            }
            if (reaction.message.channel.id === '797845739472027658') {
                const description = reaction.message.content
                const clientID = description.substring(
                    description.lastIndexOf('[') + 1,
                    description.lastIndexOf(']')
                )
                const graphisteID = description.substring(
                    description.lastIndexOf('[') + 1,
                    description.lastIndexOf(']')
                )
                const signalementID = description.substring(
                    description.lastIndexOf('<') + 1,
                    description.lastIndexOf('>')
                )
                if (reaction.emoji.name === 'üé®') {
                    client.users.cache.get(signalementID).send(new Discord.MessageEmbed()
                        .setDescription('üéâ **Bonne nouvelle**\n\nVotre signalement a permi de bannir le graphiste signal√© !\n\n**(Pour obtenir de l\'aide, taper `' + prefix + 'help` !)**')
                        .setColor('#00FF00')
                        .setFooter(config.version, client.user.avatarURL()))
                    db.push('blacklist', graphisteID)
                    client.users.cache.get(graphisteID).send(new Discord.MessageEmbed()
                        .setDescription('üõë **Bonjour, suite √† votre bannissement de Graph Bot l\'utilisation de celui-ci vous est maintenant bloqu√©**\n\n**(Pour obtenir de l\'aide, une **[documentation](https://graphbot.gitbook.io/graph-bot/)** est disponible !)**')
                        .setColor('#FF0000')
                        .setFooter(config.version, client.user.avatarURL()))
                    reaction.message.delete()
                    reaction.message.client.channels.cache.get('797853971162595339').send('Utilisateur √† l\'identifiant `' + graphisteID + '` banni par ' + user.tag + ' (`' + user.id + '`) ')
                }
                if (reaction.emoji.name === 'üí∞') {
                    client.users.cache.get(signalementID).send(new Discord.MessageEmbed()
                        .setDescription('üéâ **Bonne nouvelle**\n\nVotre signalement a permi de bannir le client signal√© !\n\n**(Pour obtenir de l\'aide, taper `' + prefix + 'help` !)**')
                        .setColor('#00FF00')
                        .setFooter(config.version, client.user.avatarURL()))
                    db.push('blacklist', clientID)
                    client.users.cache.get(clientID).send(new Discord.MessageEmbed()
                        .setDescription('üõë **Bonjour, suite √† votre bannissement de Graph Bot l\'utilisation de celui-ci vous est maintenant bloqu√©**\n\n**(Pour obtenir de l\'aide, une **[documentation](https://graphbot.gitbook.io/graph-bot/)** est disponible !)**')
                        .setColor('#FF0000')
                        .setFooter(config.version, client.user.avatarURL()))
                    reaction.message.delete()
                    reaction.message.client.channels.cache.get('797853971162595339').send('Utilisateur √† l\'identifiant `' + clientID + '` banni par ' + user.tag + ' (`' + user.id + '`) ')
                }
                if (reaction.emoji.name === '‚≠ï') {
                    client.users.cache.get(signalementID).send(new Discord.MessageEmbed()
                        .setDescription('‚ö†Ô∏è **Signalement incorrect**\n\nVotre signalement n\'a pas permis de confirmer que le membre signal√© doit √™tre banni !\n\n**(Pour obtenir de l\'aide, taper `' + prefix + 'help` !)**')
                        .setColor('#e55f2a')
                        .setFooter(config.version, client.user.avatarURL()))
                    reaction.message.delete()
                }
            }

            // Syst√®me qui g√®re le signalement des membres

            // Syst√®me qui g√®re la validation des cr√©ations

            if (reaction.message.channel.id === '775274490723827715') {
                const description = reaction.message.embeds[0].description
                const userID = description.substring(
                    description.lastIndexOf('(') + 1,
                    description.lastIndexOf(')')
                )
                const creationID = description.substring(
                    description.lastIndexOf('[') + 1,
                    description.lastIndexOf(']')
                )
                const lienpreuveID = description.substring(
                    description.indexOf('-') + 1,
                    description.lastIndexOf('-')
                )
                if (reaction.emoji.name === '‚úÖ') {
                    const creations = db.get('crea_' + userID)
                    creations.find((creation) => creation.id === parseInt(creationID)).verif = '‚úÖ'
                    db.set('crea_' + userID, creations)
                    client.users.cache.get(userID).send(new Discord.MessageEmbed()
                        .setDescription('üéâ **Bonne nouvelle**\n\nVotre cr√©ation √† l\'identifiant `' + creationID + '` a √©t√© v√©rifi√© !\n\nTaper `' + prefix + 'viewcrea` pour voir votre nouvelle validation !\n\n**(Pour obtenir de l\'aide, taper `' + prefix + 'help` !)**')
                        .setColor('#00FF00')
                        .setFooter(config.version, client.user.avatarURL()))
                    client.channels.cache.get('775411371189862410').send('Cr√©ation num√©ro ' + creationID + ' de l\'utilisateur (`' + userID + '`) valid√©e par ' + user.tag + ' (`' + user.id + '`)')
                } else {
                    client.users.cache.get(userID).send(new Discord.MessageEmbed()
                        .setDescription('‚ö†Ô∏è **Preuve invalide**\n\nVotre preuve n\'a pas permis de confirmer que la cr√©ation √† l\'identifiant `' + creationID + '` vous appartenez !\n\n`' + prefix + 'addpreuve ' + creationID + ' [votre preuve]` : permet d‚Äôenregistrer une preuve dans la base de donn√©es, une preuve est un screen du projet (photoshop, gimp, etc‚Ä¶) de la cr√©ation ou l‚Äôon peut voir les calques, elle est reli√© au num√©ro de la cr√©ation entr√© dans la commande !\n\n(votre preuve doit √™tre envoyer dans le m√™me message que la commande, mais en pi√®ce jointe (le + situ√© √† gauche de la zone d‚Äô√©criture))\n\n**(Pour obtenir de l\'aide, une **[documentation](https://graphbot.gitbook.io/graph-bot/)** est disponible !)**')
                        .setColor('#e55f2a')
                        .setFooter(config.version, client.user.avatarURL()))
                    // ici on r√©cup√®re toutes les preuves de l'utilisateur et on garde que celles ou preuve.url n'est pas √©gal √† celle qu'on veut enlever
                    const preuvedb = db.get('pr_' + userID).filter((preuve) => preuve.url !== lienpreuveID)
                    // on met √† jour la db
                    db.set('pr_' + userID, preuvedb)
                }
                reaction.message.channel.messages.cache.filter(message => {
                    if (message.embeds.length === 0) return false
                    const description2 = message.embeds[0].description
                    const userID2 = description2.substring(
                        description2.lastIndexOf('(') + 1,
                        description2.lastIndexOf(')')
                    )
                    const creationID2 = description2.substring(
                        description2.lastIndexOf('[') + 1,
                        description2.lastIndexOf(']')
                    )
                    return userID2 === userID && creationID2 === creationID
                }).forEach(message => message.delete())
            }

        // Syst√®me qui g√®re la validation des cr√©ations
        }

        // Syst√®me commande help
        let prefix = '!gb'
        if (db.has('prefix_' + reaction.message.guild.id)) {
            prefix = db.get('prefix_' + reaction.message.guild.id)
        }
        if (reaction.emoji.name === 'ü§ñ') {
            reaction.message.edit(new Discord.MessageEmbed()
                .setTitle('ü§ñ Explication et but du bot')
                .setDescription('Graph bot est un bot open source (son **[code](https://github.com/matdefy/Graph-bot)** est disponible librement), c‚Äôest un projet qui a pour but d‚Äôoffrir un bot discord qui est en ligne 24h/24 7j/7 365j/365, et qui touche le milieu du graphisme !\n\nSon objectif est de simplifier les serveurs de ce th√®me avec par exemple un syst√®me de prise de commande intelligent, ou un enregistrement de cr√©ation totalement gratuit !\n\nIl est √©quip√© d‚Äôune **[documentation](https://graphbot.gitbook.io/graph-bot/)** qui permet de comprendre en d√©taille toutes ces commandes, et fonctionnalit√©s !\nUn **[serveur](https://discord.gg/pUj3AK5u5V)** de support qui permet en cas de probl√®me de pouvoir √™tre aid√© dans un d√©lai le plus court possible !\nOu encore la possibilit√© de pouvoir proposer des **[suggestions](https://discord.gg/c7KfGJXBJY)** pour une am√©lioration constante du bot !')
                .setColor('00FF00')
                .setFooter(config.version, reaction.message.client.user.avatarURL())).then(msg => {
                reaction.message.reactions.removeAll()
                msg.react('‚ÑπÔ∏è')
            })
        }
        if (reaction.emoji.name === '‚å®Ô∏è') {
            if (reaction.message.channel.type === 'dm') {
                reaction.message.edit(new Discord.MessageEmbed()
                    .setTitle('‚å®Ô∏è Commandes disponibles')
                    .setDescription('Pour am√©liorer l‚Äôorganisation des commandes, elles sont reli√©es en **fonctionnalit√©es** :\n\n**- Passer commande : üí¨**\n\n**- Enregistrer/G√©rer une cr√©ation : üñºÔ∏è**\n\n**- Configurer le syst√®me de commandes/tickets sur un serveur : ‚öôÔ∏è**\n\n**- Information sur le bot : üìä**\n\nChaque commande doit s‚Äô√©crire avec un **prefix** pour permettre √† Graph Bot de la prendre en compte, ce qui donne `' + prefix + '[commande]` !\n\nUne commande peut comporter une ou plusieurs **option/s**, elles seront affich√©es entre des `[option, option, option]` !\nPour utiliser les commandes, les crochets doivent √™tre supprim√©s !\n\n**Certaines fonctionnalit√©es contiennent plusieurs pages, vous pouvez y navigez en cliquant sur les r√©actions 1Ô∏è‚É£, 2Ô∏è‚É£, 3Ô∏è‚É£, 4Ô∏è‚É£ et üá¶, üáß**')
                    .setColor('00FF00')
                    .setFooter(config.version, reaction.message.client.user.avatarURL())).then(msg => {
                    reaction.message.reactions.removeAll()
                    msg.react('‚ÑπÔ∏è')
                    msg.react('üí¨')
                    msg.react('üñºÔ∏è')
                    msg.react('‚öôÔ∏è')
                    msg.react('üìä')
                })
            } else {
                reaction.message.edit(new Discord.MessageEmbed()
                    .setTitle('‚å®Ô∏è Commandes disponibles')
                    .setDescription('Pour am√©liorer l‚Äôorganisation des commandes, elles sont group√©es en **fonctionnalit√©es** :\n\n**- Passer commande : üí¨**\n\n**- Enregistrer/G√©rer une cr√©ation : üñºÔ∏è**\n\n**- Configurer le syst√®me de commandes/tickets sur un serveur : ‚öôÔ∏è**\n\n**- Information sur le bot : üìä**\n\nChaque commande doit s‚Äô√©crire avec un **prefix** pour permettre √† Graph Bot de la prendre en compte, ce qui donne `' + prefix + '[commande]` !\n\nUne commande peut comporter une ou plusieurs **option/s**, elles seront affich√©es entre des `[option, option, option]` !\nPour utiliser les commandes, les crochets doivent √™tre supprim√©s !\n\n**Certaines fonctionnalit√©es contiennent plusieurs pages, vous pouvez y navigez en cliquant sur les r√©actions 1Ô∏è‚É£, 2Ô∏è‚É£, 3Ô∏è‚É£, 4Ô∏è‚É£ et üá¶, üáß**')
                    .setColor('00FF00')
                    .setFooter(config.version, reaction.message.client.user.avatarURL())).then(msg => {
                    reaction.message.reactions.removeAll()
                    msg.react('‚ÑπÔ∏è')
                    msg.react('üí¨')
                    msg.react('üñºÔ∏è')
                    msg.react('‚öôÔ∏è')
                    msg.react('üìä')
                })
            }
        }
        if (reaction.emoji.name === '‚ÑπÔ∏è') {
            reaction.message.edit(new Discord.MessageEmbed()
                .setTitle('‚ÑπÔ∏è Commande help')
                .setDescription('La commande help se partage en **2 parties** :\n\n**- explication et but du bot : ü§ñ**\n\n**- commandes disponibles : ‚å®Ô∏è**\n\nChaque partie est affich√©e en cliquant sur la r√©action ad√©quat !\n\nPour faire un retour en arri√®re dans les messages qui vont suivres, il vous suffit de cliquer sur la r√©action avec l\'emoji pr√©sent dans le titre du dernier message !\n\nPour avoir plus d\'information, une **[documentation](https://graphbot.gitbook.io/graph-bot/)** est disponible !')
                .setColor('00FF00')
                .setFooter(config.version, reaction.message.client.user.avatarURL())).then(msg => {
                reaction.message.reactions.removeAll()
                msg.react('ü§ñ')
                msg.react('‚å®Ô∏è')
            })
        }
        if (reaction.emoji.name === 'üí¨') {
            reaction.message.edit(new Discord.MessageEmbed()
                .setTitle('üí¨ Passer commande')
                .setDescription('`' + prefix + 'cmd [la description de votre commande]` : permet de passer commande sur un serveur, par la suite si un graphiste accepte votre commande un ticket sera cr√©√© entre vous et lui ! Votre description doit comprendre le prix minimum que vous pouvez allouer √† votre demande, ainsi qu‚Äôune br√®ve description de celle-ci !\n\n**‚ö†Ô∏è Cette commande doit √™tre tap√©e sur un serveur obligatoirement !**')
                .setColor('00FF00')
                .setFooter(config.version, reaction.message.client.user.avatarURL())).then(msg => {
                reaction.message.reactions.removeAll()
                msg.react('‚å®Ô∏è')
            })
        }
        if (reaction.emoji.name === 'üñºÔ∏è' || reaction.emoji.name === '1Ô∏è‚É£') {
            reaction.message.edit(new Discord.MessageEmbed()
                .setTitle('üñºÔ∏è Enregistrer/G√©rer une cr√©ation (page 1Ô∏è‚É£)')
                .setDescription('`' + prefix + 'addcrea [votre cr√©ation]` : permet d‚Äôenregistrer une cr√©ation dans la base de donn√©es !\n\n(votre cr√©ation doit √™tre envoyer dans le m√™me message que la commande, mais en pi√®ce jointe (le + situ√© √† gauche de la zone d‚Äô√©criture))\n\n`' + prefix + 'addpreuve [num√©ro de votre cr√©ation] [votre preuve]` : permet d‚Äôenregistrer une preuve dans la base de donn√©es, une preuve est un screen du projet (photoshop, gimp, etc‚Ä¶) de la cr√©ation ou l‚Äôon peut voir les calques, elle est reli√© au num√©ro de la cr√©ation entr√© dans la commande !\n\n(votre preuve doit √™tre envoyer dans le m√™me message que la commande, mais en pi√®ce jointe (le + situ√© √† gauche de la zone d‚Äô√©criture))\n\n(le num√©ro d‚Äôune cr√©ation s‚Äôobtient en tapant `' + prefix + 'viewcrea`)\n\n‚ö†Ô∏è **Cette commande doit √™tre tap√©e dans les messages MP avec Graph Bot obligatoirement !**\n\nLorsqu\'une preuve est enregistr√©e, elle est envoy√©e en examen pour d√©terminer si oui ou non, elle permet de confirmer que la cr√©ation qui lui est reli√©e vous appartient ! Si oui, votre cr√©ation sera **valid√©e**, un emoji ‚úÖ sera affich√© avec votre cr√©ation !')
                .setColor('00FF00')
                .setFooter(config.version, reaction.message.client.user.avatarURL())).then(msg => {
                reaction.message.reactions.removeAll()
                msg.react('‚å®Ô∏è')
                msg.react('2Ô∏è‚É£')
                msg.react('3Ô∏è‚É£')
                msg.react('4Ô∏è‚É£')
            })
        }
        if (reaction.emoji.name === '2Ô∏è‚É£') {
            reaction.message.edit(new Discord.MessageEmbed()
                .setTitle('üñºÔ∏è Enregistrer/G√©rer une cr√©ation (page 2Ô∏è‚É£)')
                .setDescription('`' + prefix + 'viewcrea [@membre, ID d‚Äôun utilisateur, rien]` : permet d‚Äôafficher les cr√©ations, description, d‚Äôun utilisateur ! Si vous ne rentrez aucunes options, cela affichera vos cr√©ations !\n\n`' + prefix + 'viewpreuve` : permet d‚Äôafficher les preuves qui sont reli√©es √† vos cr√©ations ! Comme une preuve est priv√©e pour des raisons de s√©curit√©, seul vous pouvez les voir !\n\n‚ö†Ô∏è **Cette commande doit √™tre tap√©e dans les messages MP avec Graph Bot obligatoirement !**\n\n`' + prefix + 'descript [une description]` : permet d‚Äôenregistrer une description de votre profil dans la base de donn√©es, elle sera affich√©e avec vos cr√©ations !')
                .setColor('00FF00')
                .setFooter(config.version, reaction.message.client.user.avatarURL())).then(msg => {
                reaction.message.reactions.removeAll()
                msg.react('‚å®Ô∏è')
                msg.react('1Ô∏è‚É£')
                msg.react('3Ô∏è‚É£')
                msg.react('4Ô∏è‚É£')
            })
        }
        if (reaction.emoji.name === '3Ô∏è‚É£') {
            reaction.message.edit(new Discord.MessageEmbed()
                .setTitle('üñºÔ∏è Enregistrer/G√©rer une cr√©ation (page 3Ô∏è‚É£)')
                .setDescription('`' + prefix + 'setadvance [num√©ro d‚Äôune cr√©ation]` : permet d‚Äôavertir les utilisateurs que la cr√©ation au num√©ro entrer dans la commande n‚Äôest pas termin√©e ! Un emoji üõ†Ô∏è sera affich√© avec votre cr√©ation !\n\n(le num√©ro d‚Äôune cr√©ation s‚Äôobtient en tapant `' + prefix + 'viewcrea`)\n\n`' + prefix + 'setadvance [num√©ro d‚Äôune cr√©ation] [cr√©ation finalis√©]` : permet de remplacer votre cr√©ation non termin√©e par celle finalis√© ! L‚Äôemoji üõ†Ô∏è sera remplacer par ‚úÖ quand votre cr√©ation sera affich√© !\n\n(le num√©ro d‚Äôune cr√©ation s‚Äôobtient en tapant `' + prefix + 'viewcrea`)\n\n(votre cr√©ation doit √™tre envoyer dans le m√™me message que la commande, mais en pi√®ce jointe (le + situ√© √† gauche de la zone d‚Äô√©criture))\n\n‚ö†Ô∏è **Cette commande ne fonctionne que si vous avez tap√© au par avant `' + prefix + 'setadvance [num√©ro d\'une cr√©ation]` !**\n\n‚ö†Ô∏è **La validation de la cr√©ation saute automatiquement √† chaque modification de celles-ci !**')
                .setColor('00FF00')
                .setFooter(config.version, reaction.message.client.user.avatarURL())).then(msg => {
                reaction.message.reactions.removeAll()
                msg.react('‚å®Ô∏è')
                msg.react('1Ô∏è‚É£')
                msg.react('2Ô∏è‚É£')
                msg.react('4Ô∏è‚É£')
            })
        }
        if (reaction.emoji.name === '4Ô∏è‚É£') {
            reaction.message.edit(new Discord.MessageEmbed()
                .setTitle('üñºÔ∏è Enregistrer/G√©rer une cr√©ation (page 4Ô∏è‚É£)')
                .setDescription('`' + prefix + 'deletecrea [num√©ro d‚Äôune cr√©ation]` : permet de supprimer de la base de donn√©es la cr√©ation et les/la preuve/s entr√© dans la commande !\n\n(le num√©ro d‚Äôune cr√©ation s‚Äôobtient en tapant `' + prefix + 'viewcrea`)\n\n‚ö†Ô∏è **Lorsque cette commande est tap√©e, aucun retour en arri√®re n\'est possible !**\n\n`' + prefix + 'delete` : permet de supprimer toutes les cr√©ations, preuves, description, de la base de donn√©es !\n\n‚ö†Ô∏è **Lorsque cette commande est tap√©e, aucun retour en arri√®re n\'est possible !**')
                .setColor('00FF00')
                .setFooter(config.version, reaction.message.client.user.avatarURL())).then(msg => {
                reaction.message.reactions.removeAll()
                msg.react('‚å®Ô∏è')
                msg.react('1Ô∏è‚É£')
                msg.react('2Ô∏è‚É£')
                msg.react('3Ô∏è‚É£')
            })
        }
        if (reaction.emoji.name === '‚öôÔ∏è' || reaction.emoji.name === 'üá¶') {
            reaction.message.edit(new Discord.MessageEmbed()
                .setTitle('‚öôÔ∏è Configurer le syst√®me de commandes/tickets sur un serveur (page üá¶)')
                .setDescription('`' + prefix + 'init` : permet de configurer le syst√®me de commande. Apr√®s l‚Äôavoir tap√©, le bot va cr√©er un channel ou les clients pourront passer commande, un channel permettant au graphiste d\'accepter les commandes des clients, ainsi qu‚Äôune cat√©gorie qui stockera les tickets de commandes et les 2 channels d√©crits ci-dessus.\n\n(pour supprimer le syst√®me sur votre serveur, retaper la commande)\n\n(si par erreur vous supprimez un channel ou la cat√©gorie cr√©√©e par le bot, retaper la commande. Le bot va automatiquement d√©tecter qu‚Äôil y a une anomalie et corriger le probl√®me)\n\n‚ö†Ô∏è **Permission de pouvoir g√©rer le serveur obligatoire !**\n\n‚ö†Ô∏è **Cette commande doit √™tre tap√©e sur un serveur obligatoirement !**')
                .setColor('00FF00')
                .setFooter(config.version, reaction.message.client.user.avatarURL())).then(msg => {
                reaction.message.reactions.removeAll()
                msg.react('‚å®Ô∏è')
                msg.react('üáß')
            })
        }
        if (reaction.emoji.name === 'üáß') {
            reaction.message.edit(new Discord.MessageEmbed()
                .setTitle('‚öôÔ∏è Configurer le syst√®me de commandes/tickets sur un serveur (page üáß)')
                .setDescription('`' + prefix + 'tickets [nom des tickets]` : permet de cr√©er une cat√©gorie et d‚Äôenvoyer un message avec une r√©action dans le channel ou la commande a √©t√© tap√©e. Lorsque la r√©action du message est cliqu√©e, un ticket sera cr√©√© dans la cat√©gorie.\n\n(le nom des tickets est facultatif)\n\n‚ö†Ô∏è **Permission de pouvoir g√©rer le serveur obligatoire !**\n\n‚ö†Ô∏è **Cette commande doit √™tre tap√©e sur un serveur obligatoirement !**\n\n`' + prefix + 'setprefix [un prefix]` : permet de configurer un prefix sur le serveur ou vous vous situez !\n\n‚ö†Ô∏è **Permission de pouvoir g√©rer le serveur obligatoire !**\n\n‚ö†Ô∏è **Cette commande doit √™tre tap√©e sur un serveur obligatoirement !**')
                .setColor('00FF00')
                .setFooter(config.version, reaction.message.client.user.avatarURL())).then(msg => {
                reaction.message.reactions.removeAll()
                msg.react('‚å®Ô∏è')
                msg.react('üá¶')
            })
        }
        if (reaction.emoji.name === 'üìä') {
            reaction.message.edit(new Discord.MessageEmbed()
                .setTitle('üìä Information sur le bot')
                .setDescription('`' + prefix + 'help` : permet d‚Äôavoir des informations sur le bot est sur les commandes disponibles !\n**‚ö†Ô∏è Cela ne sert √† rien de taper cette commande comme vous √™tes d√©j√† √† l‚Äôint√©rieur de celles-ci !**\n\n`' + prefix + 'info` : permet d‚Äôavoir des informations sur le nombre de commandes tap√©es de mani√®re individuelle, ou group√©es ! Ainsi que le ping du bot ! (Actuellement `' + client.ws.ping + 'ms`.)')
                .setColor('00FF00')
                .setFooter(config.version, reaction.message.client.user.avatarURL())).then(msg => {
                reaction.message.reactions.removeAll()
                msg.react('‚å®Ô∏è')
            })
        }

    // Syst√®me commande help
    }
})

// Syst√®me reaction

// Syst√®me qui g√®re les sauvegardes de la base de donn√©es

const CronJob = require('cron').CronJob
const job = new CronJob('0 0 0 * * *', function () {
    const date = new Date()

    fs.writeFileSync('./backupdatabase/' + date.getDate() + '-' + (date.getMonth() + 1) + '.json', JSON.stringify(db.data, null, 2), 'utf-8')
}, null, true, 'Europe/Paris')
job.start()

// Syst√®me qui g√®re les sauvegardes de la base de donn√©es

// Syst√®me activ√© lors du d√©marrage du bot

client.on('ready', async () => {
    client.channels.cache.get('775274490723827715').messages.fetch()

    Object.keys(dbLogs.data).forEach(element => {
        if (element.startsWith('channelcmd_')) {
            const channelID = dbLogs.data[element]
            const channel = client.channels.cache.get(channelID)
            if (!channel) return
            channel.messages.fetch()
        }
    })

    // Syst√®me qui g√®re le jeu du bot

    const statuses = [
        'MP le bot',
        'pour enregistrer des üé® cr√©ations üé® !',
        'regarder !gbhelp'
    ]
    let i = 5
    setInterval(() => {
        client.user.setActivity(statuses[i], { type: 'PLAYING' })
        i = ++i % statuses.length
    }, 20 * 1000)

    // Syst√®me qui g√®re le jeu du bot

    console.log('‚úÖ bot connect√© ‚úÖ')
})

// Syst√®me activ√© lors du d√©marrage du bot
